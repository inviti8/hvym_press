name: Build and Release

on:
  push:
    tags:
      - 'v*.*'  # Triggers on tags like v0.00, v0.01, v1.0, etc.

env:
  PYTHON_VERSION: '3.11'
  PROJECT_NAME: 'hvym_press'

jobs:
  build-windows:
    name: Build Windows
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller pillow
        
    - name: Prepare icon files
      run: |
        # Convert PNG to ICO for Windows
        python -c "
        from PIL import Image
        img = Image.open('images/logo.png')
        sizes = [(16, 16), (32, 32), (48, 48), (256, 256)]
        img.save('images/logo.ico', format='ICO', sizes=sizes)
        print('Created logo.ico for Windows builds')
        "
        
    - name: Build Windows executable
      run: |
        python build_cross_platform.py
        echo "Build completed for Windows"
        
    - name: Upload Windows artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.PROJECT_NAME }}-windows
        path: release/hvym_press.exe
        retention-days: 30

  build-linux:
    name: Build Linux
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller pillow
        
    - name: Prepare icon files
      run: |
        # Ensure PNG logo is available for Linux builds
        echo "Using PNG logo for Linux builds"
        
    - name: Build Linux executable
      run: |
        # Install older Python version for better compatibility
        sudo apt-get update
        sudo apt-get install -y python3.8 python3.8-venv python3-pip
        
        # Create and activate venv with Python 3.8
        python3.8 -m venv venv
        source venv/bin/activate
        
        # Install build dependencies
        pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller==5.13.0
        
        # Build with compatibility flags
        python build_cross_platform.py --exclude _tkinter --exclude _ssl
        
        echo "Build completed for Linux"
        
    - name: Upload Linux artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.PROJECT_NAME }}-linux
        path: release/hvym_press
        retention-days: 30

  build-macos:
    name: Build macOS (Intel)
    runs-on: macos-latest  # This runs on Intel macOS, not Apple Silicon
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller pillow
        
    - name: Prepare icon files
      run: |
        # Ensure PNG logo is available for macOS builds
        echo "Using PNG logo for macOS builds"
        
    - name: Build macOS executable
      run: |
        python build_cross_platform.py
        echo "Build completed for macOS"
        
    - name: Upload macOS artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.PROJECT_NAME }}-macos
        path: release/hvym_press
        retention-days: 30

  create-release:
    name: Create Release
    needs: [build-windows, build-linux, build-macos]
    runs-on: ubuntu-latest
    if: success()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
        
    - name: Prepare release assets
      run: |
        mkdir -p release-assets
        
        # Copy Windows executable
        if [ -f "artifacts/${{ env.PROJECT_NAME }}-windows/hvym_press.exe" ]; then
          cp "artifacts/${{ env.PROJECT_NAME }}-windows/hvym_press.exe" "release-assets/hvym_press-windows.exe"
        fi
        
        # Copy Linux executable
        if [ -f "artifacts/${{ env.PROJECT_NAME }}-linux/hvym_press" ]; then
          cp "artifacts/${{ env.PROJECT_NAME }}-linux/hvym_press" "release-assets/hvym_press-linux"
        fi
        
        # Copy macOS executable
        if [ -f "artifacts/${{ env.PROJECT_NAME }}-macos/hvym_press" ]; then
          cp "artifacts/${{ env.PROJECT_NAME }}-macos/hvym_press" "release-assets/hvym_press-macos"
        fi
        
        # Create install scripts - using echo to avoid YAML parsing issues
        echo '@echo off' > "release-assets/install-windows.bat"
        echo 'echo Installing HVYM Press for Windows...' >> "release-assets/install-windows.bat"
        echo 'set INSTALL_DIR=%LOCALAPPDATA%\heavymeta-cli' >> "release-assets/install-windows.bat"
        echo 'if not exist "%INSTALL_DIR%" mkdir "%INSTALL_DIR%"' >> "release-assets/install-windows.bat"
        echo 'copy "%~dp0hvym_press-windows.exe" "%INSTALL_DIR%\hvym_press.exe"' >> "release-assets/install-windows.bat"
        echo 'echo Installation completed! Executable is in: %INSTALL_DIR%' >> "release-assets/install-windows.bat"
        echo 'echo You can add this directory to your PATH for system-wide access.' >> "release-assets/install-windows.bat"
        echo 'pause' >> "release-assets/install-windows.bat"

        echo '#!/bin/bash' > "release-assets/install-linux.sh"
        echo 'echo "Installing HVYM Press for Linux..."' >> "release-assets/install-linux.sh"
        echo 'INSTALL_DIR="$HOME/.local/share/heavymeta-cli"' >> "release-assets/install-linux.sh"
        echo 'mkdir -p "$INSTALL_DIR"' >> "release-assets/install-linux.sh"
        echo 'cp "$(dirname "$0")/hvym_press-linux" "$INSTALL_DIR/hvym_press"' >> "release-assets/install-linux.sh"
        echo 'chmod +x "$INSTALL_DIR/hvym_press"' >> "release-assets/install-linux.sh"
        echo 'echo "Installation completed! Executable is in: $INSTALL_DIR"' >> "release-assets/install-linux.sh"
        echo 'echo "You can add this directory to your PATH for system-wide access."' >> "release-assets/install-linux.sh"
        echo 'echo "Add this line to your ~/.bashrc or ~/.zshrc:"' >> "release-assets/install-linux.sh"
        echo 'echo "export PATH=\\"\\$PATH:$INSTALL_DIR\\""' >> "release-assets/install-linux.sh"

        echo '#!/bin/bash' > "release-assets/install-macos.sh"
        echo 'echo "Installing HVYM Press for macOS..."' >> "release-assets/install-macos.sh"
        echo 'INSTALL_DIR="$HOME/Library/Application Support/heavymeta-cli"' >> "release-assets/install-macos.sh"
        echo 'mkdir -p "$INSTALL_DIR"' >> "release-assets/install-macos.sh"
        echo 'cp "$(dirname "$0")/hvym_press-macos" "$INSTALL_DIR/hvym_press"' >> "release-assets/install-macos.sh"
        echo 'chmod +x "$INSTALL_DIR/hvym_press"' >> "release-assets/install-macos.sh"
        echo 'echo "Installation completed! Executable is in: $INSTALL_DIR"' >> "release-assets/install-macos.sh"
        echo 'echo "You can add this directory to your PATH for system-wide access."' >> "release-assets/install-macos.sh"
        echo 'echo "Add this line to your ~/.zshrc:"' >> "release-assets/install-macos.sh"
        echo 'echo "export PATH=\\"\\$PATH:$INSTALL_DIR\\""' >> "release-assets/install-macos.sh"

        # Make shell scripts executable
        chmod +x "release-assets/install-linux.sh"
        chmod +x "release-assets/install-macos.sh"
        
        # Create README for release
        echo "# HVYM Press Release" > "release-assets/README.md"
        echo "" >> "release-assets/README.md"
        echo "This release contains pre-built executables for multiple platforms." >> "release-assets/README.md"
        echo "" >> "release-assets/README.md"
        echo "## Supported Platforms" >> "release-assets/README.md"
        echo "" >> "release-assets/README.md"
        echo "- **Windows**: \`hvym_press-windows.exe\`" >> "release-assets/README.md"
        echo "- **Linux**: \`hvym_press-linux\`" >> "release-assets/README.md"
        echo "- **macOS (Intel)**: \`hvym_press-macos\`" >> "release-assets/README.md"
        echo "" >> "release-assets/README.md"
        echo "## Installation" >> "release-assets/README.md"
        echo "" >> "release-assets/README.md"
        echo "### Windows" >> "release-assets/README.md"
        echo "1. Download \`hvym_press-windows.exe\`" >> "release-assets/README.md"
        echo "2. Run \`install-windows.bat\` as administrator" >> "release-assets/README.md"
        echo "3. Or manually copy to \`%LOCALAPPDATA%\\heavymeta-cli\\\`" >> "release-assets/README.md"
        echo "" >> "release-assets/README.md"
        echo "### Linux" >> "release-assets/README.md"
        echo "1. Download \`hvym_press-linux\`" >> "release-assets/README.md"
        echo "2. Run: \`chmod +x install-linux.sh && ./install-linux.sh\`" >> "release-assets/README.md"
        echo "3. Or manually copy to \`~/.local/share/heavymeta-cli/\`" >> "release-assets/README.md"
        echo "" >> "release-assets/README.md"
        echo "### macOS (Intel only)" >> "release-assets/README.md"
        echo "1. Download \`hvym_press-macos\`" >> "release-assets/README.md"
        echo "2. Run: \`chmod +x install-macos.sh && ./install-macos.sh\`" >> "release-assets/README.md"
        echo "3. Or manually copy to \`~/Library/Application Support/heavymeta-cli/\`" >> "release-assets/README.md"
        echo "" >> "release-assets/README.md"
        echo "## Notes" >> "release-assets/README.md"
        echo "" >> "release-assets/README.md"
        echo "- **Apple Silicon (M1/M2)**: Not supported in this release" >> "release-assets/README.md"
        echo "- **Dependencies**: All required libraries are bundled in the executables" >> "release-assets/README.md"
        echo "- **Updates**: Check GitHub releases for newer versions" >> "release-assets/README.md"
        echo "" >> "release-assets/README.md"
        echo "## Building from Source" >> "release-assets/README.md"
        echo "" >> "release-assets/README.md"
        echo "If you need to build for an unsupported platform:" >> "release-assets/README.md"
        echo "" >> "release-assets/README.md"
        echo "\`\`\`bash" >> "release-assets/README.md"
        echo "git clone https://github.com/yourusername/hvym_press.git" >> "release-assets/README.md"
        echo "cd hvym_press" >> "release-assets/README.md"
        echo "python build_cross_platform.py" >> "release-assets/README.md"
        echo "\`\`\`" >> "release-assets/README.md"
        echo "" >> "release-assets/README.md"
        echo "## Support" >> "release-assets/README.md"
        echo "" >> "release-assets/README.md"
        echo "For issues or questions, please check the GitHub repository or create an issue." >> "release-assets/README.md"

        echo "Release assets prepared successfully"
        ls -la release-assets/
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: release-assets/*
        name: Release ${{ github.ref_name }}
        tag_name: ${{ github.ref_name }}
        body: |
          ## 🚀 HVYM Press Release ${{ github.ref_name }}
          
          ### 📦 What's New
          - Cross-platform executables for Windows, Linux, and Intel macOS
          - Improved media link replacement and IPFS deployment
          - Enhanced error handling and debugging
          
          ### 🌍 Supported Platforms
          - **Windows**: `hvym_press-windows.exe`
          - **Linux**: `hvym_press-linux` 
          - **macOS (Intel)**: `hvym_press-macos`
          
          ### ⚠️ Important Notes
          - **Apple Silicon (M1/M2)**: Not supported in this release
          - All dependencies are bundled in the executables
          - Includes installation scripts for each platform
          
          ### 🔧 Installation
          Run the appropriate install script for your platform:
          - Windows: `install-windows.bat`
          - Linux: `./install-linux.sh`
          - macOS: `./install-macos.sh`
          
          ### 📋 Changes
          - Fixed IPFS media upload issues
          - Improved HTML generation and media link replacement
          - Enhanced cross-platform compatibility
          - Better error handling and user feedback
          
          ### 🐛 Bug Fixes
          - Fixed URL encoding issues in media link matching
          - Resolved path traversal protection bugs
          - Fixed HTML generation order issues
          - Improved manifest structure and data flow
          
          ### 📚 Documentation
          - Comprehensive build system documentation
          - Cross-platform installation guides
          - Troubleshooting and debugging information
          
          ---
          
          **Built with ❤️ using GitHub Actions**
          
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify-completion:
    name: Notify Completion
    needs: [create-release]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify success
      if: success()
      run: |
        echo "🎉 Release created successfully!"
        echo "Version: ${{ github.ref_name }}"
        echo "Repository: ${{ github.repository }}"
        echo "Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }}"
        
    - name: Notify failure
      if: failure()
      run: |
        echo "💥 Release creation failed!"
        echo "Check the workflow logs for details:"
        echo "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
